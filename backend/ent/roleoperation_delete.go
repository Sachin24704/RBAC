// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/predicate"
	"backend/ent/roleoperation"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoleOperationDelete is the builder for deleting a RoleOperation entity.
type RoleOperationDelete struct {
	config
	hooks    []Hook
	mutation *RoleOperationMutation
}

// Where appends a list predicates to the RoleOperationDelete builder.
func (rod *RoleOperationDelete) Where(ps ...predicate.RoleOperation) *RoleOperationDelete {
	rod.mutation.Where(ps...)
	return rod
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rod *RoleOperationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rod.sqlExec, rod.mutation, rod.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rod *RoleOperationDelete) ExecX(ctx context.Context) int {
	n, err := rod.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rod *RoleOperationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(roleoperation.Table, sqlgraph.NewFieldSpec(roleoperation.FieldID, field.TypeInt))
	if ps := rod.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rod.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rod.mutation.done = true
	return affected, err
}

// RoleOperationDeleteOne is the builder for deleting a single RoleOperation entity.
type RoleOperationDeleteOne struct {
	rod *RoleOperationDelete
}

// Where appends a list predicates to the RoleOperationDelete builder.
func (rodo *RoleOperationDeleteOne) Where(ps ...predicate.RoleOperation) *RoleOperationDeleteOne {
	rodo.rod.mutation.Where(ps...)
	return rodo
}

// Exec executes the deletion query.
func (rodo *RoleOperationDeleteOne) Exec(ctx context.Context) error {
	n, err := rodo.rod.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{roleoperation.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rodo *RoleOperationDeleteOne) ExecX(ctx context.Context) {
	if err := rodo.Exec(ctx); err != nil {
		panic(err)
	}
}
