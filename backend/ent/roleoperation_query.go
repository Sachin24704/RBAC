// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/operation"
	"backend/ent/predicate"
	"backend/ent/role"
	"backend/ent/roleoperation"
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoleOperationQuery is the builder for querying RoleOperation entities.
type RoleOperationQuery struct {
	config
	ctx            *QueryContext
	order          []roleoperation.OrderOption
	inters         []Interceptor
	predicates     []predicate.RoleOperation
	withRole       *RoleQuery
	withOperations *OperationQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RoleOperationQuery builder.
func (roq *RoleOperationQuery) Where(ps ...predicate.RoleOperation) *RoleOperationQuery {
	roq.predicates = append(roq.predicates, ps...)
	return roq
}

// Limit the number of records to be returned by this query.
func (roq *RoleOperationQuery) Limit(limit int) *RoleOperationQuery {
	roq.ctx.Limit = &limit
	return roq
}

// Offset to start from.
func (roq *RoleOperationQuery) Offset(offset int) *RoleOperationQuery {
	roq.ctx.Offset = &offset
	return roq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (roq *RoleOperationQuery) Unique(unique bool) *RoleOperationQuery {
	roq.ctx.Unique = &unique
	return roq
}

// Order specifies how the records should be ordered.
func (roq *RoleOperationQuery) Order(o ...roleoperation.OrderOption) *RoleOperationQuery {
	roq.order = append(roq.order, o...)
	return roq
}

// QueryRole chains the current query on the "role" edge.
func (roq *RoleOperationQuery) QueryRole() *RoleQuery {
	query := (&RoleClient{config: roq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := roq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := roq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(roleoperation.Table, roleoperation.FieldID, selector),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, roleoperation.RoleTable, roleoperation.RoleColumn),
		)
		fromU = sqlgraph.SetNeighbors(roq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOperations chains the current query on the "operations" edge.
func (roq *RoleOperationQuery) QueryOperations() *OperationQuery {
	query := (&OperationClient{config: roq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := roq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := roq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(roleoperation.Table, roleoperation.FieldID, selector),
			sqlgraph.To(operation.Table, operation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, roleoperation.OperationsTable, roleoperation.OperationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(roq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RoleOperation entity from the query.
// Returns a *NotFoundError when no RoleOperation was found.
func (roq *RoleOperationQuery) First(ctx context.Context) (*RoleOperation, error) {
	nodes, err := roq.Limit(1).All(setContextOp(ctx, roq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{roleoperation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (roq *RoleOperationQuery) FirstX(ctx context.Context) *RoleOperation {
	node, err := roq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RoleOperation ID from the query.
// Returns a *NotFoundError when no RoleOperation ID was found.
func (roq *RoleOperationQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = roq.Limit(1).IDs(setContextOp(ctx, roq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{roleoperation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (roq *RoleOperationQuery) FirstIDX(ctx context.Context) int {
	id, err := roq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RoleOperation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RoleOperation entity is found.
// Returns a *NotFoundError when no RoleOperation entities are found.
func (roq *RoleOperationQuery) Only(ctx context.Context) (*RoleOperation, error) {
	nodes, err := roq.Limit(2).All(setContextOp(ctx, roq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{roleoperation.Label}
	default:
		return nil, &NotSingularError{roleoperation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (roq *RoleOperationQuery) OnlyX(ctx context.Context) *RoleOperation {
	node, err := roq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RoleOperation ID in the query.
// Returns a *NotSingularError when more than one RoleOperation ID is found.
// Returns a *NotFoundError when no entities are found.
func (roq *RoleOperationQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = roq.Limit(2).IDs(setContextOp(ctx, roq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{roleoperation.Label}
	default:
		err = &NotSingularError{roleoperation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (roq *RoleOperationQuery) OnlyIDX(ctx context.Context) int {
	id, err := roq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RoleOperations.
func (roq *RoleOperationQuery) All(ctx context.Context) ([]*RoleOperation, error) {
	ctx = setContextOp(ctx, roq.ctx, ent.OpQueryAll)
	if err := roq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*RoleOperation, *RoleOperationQuery]()
	return withInterceptors[[]*RoleOperation](ctx, roq, qr, roq.inters)
}

// AllX is like All, but panics if an error occurs.
func (roq *RoleOperationQuery) AllX(ctx context.Context) []*RoleOperation {
	nodes, err := roq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RoleOperation IDs.
func (roq *RoleOperationQuery) IDs(ctx context.Context) (ids []int, err error) {
	if roq.ctx.Unique == nil && roq.path != nil {
		roq.Unique(true)
	}
	ctx = setContextOp(ctx, roq.ctx, ent.OpQueryIDs)
	if err = roq.Select(roleoperation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (roq *RoleOperationQuery) IDsX(ctx context.Context) []int {
	ids, err := roq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (roq *RoleOperationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, roq.ctx, ent.OpQueryCount)
	if err := roq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, roq, querierCount[*RoleOperationQuery](), roq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (roq *RoleOperationQuery) CountX(ctx context.Context) int {
	count, err := roq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (roq *RoleOperationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, roq.ctx, ent.OpQueryExist)
	switch _, err := roq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (roq *RoleOperationQuery) ExistX(ctx context.Context) bool {
	exist, err := roq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RoleOperationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (roq *RoleOperationQuery) Clone() *RoleOperationQuery {
	if roq == nil {
		return nil
	}
	return &RoleOperationQuery{
		config:         roq.config,
		ctx:            roq.ctx.Clone(),
		order:          append([]roleoperation.OrderOption{}, roq.order...),
		inters:         append([]Interceptor{}, roq.inters...),
		predicates:     append([]predicate.RoleOperation{}, roq.predicates...),
		withRole:       roq.withRole.Clone(),
		withOperations: roq.withOperations.Clone(),
		// clone intermediate query.
		sql:  roq.sql.Clone(),
		path: roq.path,
	}
}

// WithRole tells the query-builder to eager-load the nodes that are connected to
// the "role" edge. The optional arguments are used to configure the query builder of the edge.
func (roq *RoleOperationQuery) WithRole(opts ...func(*RoleQuery)) *RoleOperationQuery {
	query := (&RoleClient{config: roq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	roq.withRole = query
	return roq
}

// WithOperations tells the query-builder to eager-load the nodes that are connected to
// the "operations" edge. The optional arguments are used to configure the query builder of the edge.
func (roq *RoleOperationQuery) WithOperations(opts ...func(*OperationQuery)) *RoleOperationQuery {
	query := (&OperationClient{config: roq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	roq.withOperations = query
	return roq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		RoleID int `json:"role_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RoleOperation.Query().
//		GroupBy(roleoperation.FieldRoleID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (roq *RoleOperationQuery) GroupBy(field string, fields ...string) *RoleOperationGroupBy {
	roq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RoleOperationGroupBy{build: roq}
	grbuild.flds = &roq.ctx.Fields
	grbuild.label = roleoperation.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		RoleID int `json:"role_id,omitempty"`
//	}
//
//	client.RoleOperation.Query().
//		Select(roleoperation.FieldRoleID).
//		Scan(ctx, &v)
func (roq *RoleOperationQuery) Select(fields ...string) *RoleOperationSelect {
	roq.ctx.Fields = append(roq.ctx.Fields, fields...)
	sbuild := &RoleOperationSelect{RoleOperationQuery: roq}
	sbuild.label = roleoperation.Label
	sbuild.flds, sbuild.scan = &roq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RoleOperationSelect configured with the given aggregations.
func (roq *RoleOperationQuery) Aggregate(fns ...AggregateFunc) *RoleOperationSelect {
	return roq.Select().Aggregate(fns...)
}

func (roq *RoleOperationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range roq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, roq); err != nil {
				return err
			}
		}
	}
	for _, f := range roq.ctx.Fields {
		if !roleoperation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if roq.path != nil {
		prev, err := roq.path(ctx)
		if err != nil {
			return err
		}
		roq.sql = prev
	}
	return nil
}

func (roq *RoleOperationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RoleOperation, error) {
	var (
		nodes       = []*RoleOperation{}
		_spec       = roq.querySpec()
		loadedTypes = [2]bool{
			roq.withRole != nil,
			roq.withOperations != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*RoleOperation).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &RoleOperation{config: roq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, roq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := roq.withRole; query != nil {
		if err := roq.loadRole(ctx, query, nodes, nil,
			func(n *RoleOperation, e *Role) { n.Edges.Role = e }); err != nil {
			return nil, err
		}
	}
	if query := roq.withOperations; query != nil {
		if err := roq.loadOperations(ctx, query, nodes, nil,
			func(n *RoleOperation, e *Operation) { n.Edges.Operations = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (roq *RoleOperationQuery) loadRole(ctx context.Context, query *RoleQuery, nodes []*RoleOperation, init func(*RoleOperation), assign func(*RoleOperation, *Role)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*RoleOperation)
	for i := range nodes {
		fk := nodes[i].RoleID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(role.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "role_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (roq *RoleOperationQuery) loadOperations(ctx context.Context, query *OperationQuery, nodes []*RoleOperation, init func(*RoleOperation), assign func(*RoleOperation, *Operation)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*RoleOperation)
	for i := range nodes {
		fk := nodes[i].OperationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(operation.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "operation_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (roq *RoleOperationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := roq.querySpec()
	_spec.Node.Columns = roq.ctx.Fields
	if len(roq.ctx.Fields) > 0 {
		_spec.Unique = roq.ctx.Unique != nil && *roq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, roq.driver, _spec)
}

func (roq *RoleOperationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(roleoperation.Table, roleoperation.Columns, sqlgraph.NewFieldSpec(roleoperation.FieldID, field.TypeInt))
	_spec.From = roq.sql
	if unique := roq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if roq.path != nil {
		_spec.Unique = true
	}
	if fields := roq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, roleoperation.FieldID)
		for i := range fields {
			if fields[i] != roleoperation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if roq.withRole != nil {
			_spec.Node.AddColumnOnce(roleoperation.FieldRoleID)
		}
		if roq.withOperations != nil {
			_spec.Node.AddColumnOnce(roleoperation.FieldOperationID)
		}
	}
	if ps := roq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := roq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := roq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := roq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (roq *RoleOperationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(roq.driver.Dialect())
	t1 := builder.Table(roleoperation.Table)
	columns := roq.ctx.Fields
	if len(columns) == 0 {
		columns = roleoperation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if roq.sql != nil {
		selector = roq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if roq.ctx.Unique != nil && *roq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range roq.predicates {
		p(selector)
	}
	for _, p := range roq.order {
		p(selector)
	}
	if offset := roq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := roq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RoleOperationGroupBy is the group-by builder for RoleOperation entities.
type RoleOperationGroupBy struct {
	selector
	build *RoleOperationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rogb *RoleOperationGroupBy) Aggregate(fns ...AggregateFunc) *RoleOperationGroupBy {
	rogb.fns = append(rogb.fns, fns...)
	return rogb
}

// Scan applies the selector query and scans the result into the given value.
func (rogb *RoleOperationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rogb.build.ctx, ent.OpQueryGroupBy)
	if err := rogb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RoleOperationQuery, *RoleOperationGroupBy](ctx, rogb.build, rogb, rogb.build.inters, v)
}

func (rogb *RoleOperationGroupBy) sqlScan(ctx context.Context, root *RoleOperationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rogb.fns))
	for _, fn := range rogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rogb.flds)+len(rogb.fns))
		for _, f := range *rogb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rogb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rogb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RoleOperationSelect is the builder for selecting fields of RoleOperation entities.
type RoleOperationSelect struct {
	*RoleOperationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ros *RoleOperationSelect) Aggregate(fns ...AggregateFunc) *RoleOperationSelect {
	ros.fns = append(ros.fns, fns...)
	return ros
}

// Scan applies the selector query and scans the result into the given value.
func (ros *RoleOperationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ros.ctx, ent.OpQuerySelect)
	if err := ros.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RoleOperationQuery, *RoleOperationSelect](ctx, ros.RoleOperationQuery, ros, ros.inters, v)
}

func (ros *RoleOperationSelect) sqlScan(ctx context.Context, root *RoleOperationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ros.fns))
	for _, fn := range ros.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ros.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ros.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
