// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/model"
	"backend/ent/operation"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Operation is the model entity for the Operation schema.
type Operation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ModelID holds the value of the "model_id" field.
	ModelID int `json:"model_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OperationQuery when eager-loading is set.
	Edges        OperationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OperationEdges holds the relations/edges for other nodes in the graph.
type OperationEdges struct {
	// Model holds the value of the model edge.
	Model *Model `json:"model,omitempty"`
	// operations which are assigned to roles
	RoleOperations []*RoleOperation `json:"role_operations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ModelOrErr returns the Model value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OperationEdges) ModelOrErr() (*Model, error) {
	if e.Model != nil {
		return e.Model, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: model.Label}
	}
	return nil, &NotLoadedError{edge: "model"}
}

// RoleOperationsOrErr returns the RoleOperations value or an error if the edge
// was not loaded in eager-loading.
func (e OperationEdges) RoleOperationsOrErr() ([]*RoleOperation, error) {
	if e.loadedTypes[1] {
		return e.RoleOperations, nil
	}
	return nil, &NotLoadedError{edge: "role_operations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Operation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case operation.FieldID, operation.FieldModelID:
			values[i] = new(sql.NullInt64)
		case operation.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Operation fields.
func (o *Operation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case operation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case operation.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				o.Name = value.String
			}
		case operation.FieldModelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field model_id", values[i])
			} else if value.Valid {
				o.ModelID = int(value.Int64)
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Operation.
// This includes values selected through modifiers, order, etc.
func (o *Operation) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryModel queries the "model" edge of the Operation entity.
func (o *Operation) QueryModel() *ModelQuery {
	return NewOperationClient(o.config).QueryModel(o)
}

// QueryRoleOperations queries the "role_operations" edge of the Operation entity.
func (o *Operation) QueryRoleOperations() *RoleOperationQuery {
	return NewOperationClient(o.config).QueryRoleOperations(o)
}

// Update returns a builder for updating this Operation.
// Note that you need to call Operation.Unwrap() before calling this method if this Operation
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Operation) Update() *OperationUpdateOne {
	return NewOperationClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Operation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Operation) Unwrap() *Operation {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Operation is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Operation) String() string {
	var builder strings.Builder
	builder.WriteString("Operation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("name=")
	builder.WriteString(o.Name)
	builder.WriteString(", ")
	builder.WriteString("model_id=")
	builder.WriteString(fmt.Sprintf("%v", o.ModelID))
	builder.WriteByte(')')
	return builder.String()
}

// Operations is a parsable slice of Operation.
type Operations []*Operation
