// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/model"
	"backend/ent/operation"
	"backend/ent/predicate"
	"backend/ent/roleoperation"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OperationUpdate is the builder for updating Operation entities.
type OperationUpdate struct {
	config
	hooks    []Hook
	mutation *OperationMutation
}

// Where appends a list predicates to the OperationUpdate builder.
func (ou *OperationUpdate) Where(ps ...predicate.Operation) *OperationUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetName sets the "name" field.
func (ou *OperationUpdate) SetName(s string) *OperationUpdate {
	ou.mutation.SetName(s)
	return ou
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ou *OperationUpdate) SetNillableName(s *string) *OperationUpdate {
	if s != nil {
		ou.SetName(*s)
	}
	return ou
}

// SetModelID sets the "model_id" field.
func (ou *OperationUpdate) SetModelID(i int) *OperationUpdate {
	ou.mutation.SetModelID(i)
	return ou
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (ou *OperationUpdate) SetNillableModelID(i *int) *OperationUpdate {
	if i != nil {
		ou.SetModelID(*i)
	}
	return ou
}

// SetModel sets the "model" edge to the Model entity.
func (ou *OperationUpdate) SetModel(m *Model) *OperationUpdate {
	return ou.SetModelID(m.ID)
}

// AddRoleOperationIDs adds the "role_operations" edge to the RoleOperation entity by IDs.
func (ou *OperationUpdate) AddRoleOperationIDs(ids ...int) *OperationUpdate {
	ou.mutation.AddRoleOperationIDs(ids...)
	return ou
}

// AddRoleOperations adds the "role_operations" edges to the RoleOperation entity.
func (ou *OperationUpdate) AddRoleOperations(r ...*RoleOperation) *OperationUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ou.AddRoleOperationIDs(ids...)
}

// Mutation returns the OperationMutation object of the builder.
func (ou *OperationUpdate) Mutation() *OperationMutation {
	return ou.mutation
}

// ClearModel clears the "model" edge to the Model entity.
func (ou *OperationUpdate) ClearModel() *OperationUpdate {
	ou.mutation.ClearModel()
	return ou
}

// ClearRoleOperations clears all "role_operations" edges to the RoleOperation entity.
func (ou *OperationUpdate) ClearRoleOperations() *OperationUpdate {
	ou.mutation.ClearRoleOperations()
	return ou
}

// RemoveRoleOperationIDs removes the "role_operations" edge to RoleOperation entities by IDs.
func (ou *OperationUpdate) RemoveRoleOperationIDs(ids ...int) *OperationUpdate {
	ou.mutation.RemoveRoleOperationIDs(ids...)
	return ou
}

// RemoveRoleOperations removes "role_operations" edges to RoleOperation entities.
func (ou *OperationUpdate) RemoveRoleOperations(r ...*RoleOperation) *OperationUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ou.RemoveRoleOperationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OperationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OperationUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OperationUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OperationUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OperationUpdate) check() error {
	if v, ok := ou.mutation.Name(); ok {
		if err := operation.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Operation.name": %w`, err)}
		}
	}
	if ou.mutation.ModelCleared() && len(ou.mutation.ModelIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Operation.model"`)
	}
	return nil
}

func (ou *OperationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(operation.Table, operation.Columns, sqlgraph.NewFieldSpec(operation.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Name(); ok {
		_spec.SetField(operation.FieldName, field.TypeString, value)
	}
	if ou.mutation.ModelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operation.ModelTable,
			Columns: []string{operation.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(model.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operation.ModelTable,
			Columns: []string{operation.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(model.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.RoleOperationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operation.RoleOperationsTable,
			Columns: []string{operation.RoleOperationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roleoperation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedRoleOperationsIDs(); len(nodes) > 0 && !ou.mutation.RoleOperationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operation.RoleOperationsTable,
			Columns: []string{operation.RoleOperationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roleoperation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RoleOperationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operation.RoleOperationsTable,
			Columns: []string{operation.RoleOperationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roleoperation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OperationUpdateOne is the builder for updating a single Operation entity.
type OperationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OperationMutation
}

// SetName sets the "name" field.
func (ouo *OperationUpdateOne) SetName(s string) *OperationUpdateOne {
	ouo.mutation.SetName(s)
	return ouo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ouo *OperationUpdateOne) SetNillableName(s *string) *OperationUpdateOne {
	if s != nil {
		ouo.SetName(*s)
	}
	return ouo
}

// SetModelID sets the "model_id" field.
func (ouo *OperationUpdateOne) SetModelID(i int) *OperationUpdateOne {
	ouo.mutation.SetModelID(i)
	return ouo
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (ouo *OperationUpdateOne) SetNillableModelID(i *int) *OperationUpdateOne {
	if i != nil {
		ouo.SetModelID(*i)
	}
	return ouo
}

// SetModel sets the "model" edge to the Model entity.
func (ouo *OperationUpdateOne) SetModel(m *Model) *OperationUpdateOne {
	return ouo.SetModelID(m.ID)
}

// AddRoleOperationIDs adds the "role_operations" edge to the RoleOperation entity by IDs.
func (ouo *OperationUpdateOne) AddRoleOperationIDs(ids ...int) *OperationUpdateOne {
	ouo.mutation.AddRoleOperationIDs(ids...)
	return ouo
}

// AddRoleOperations adds the "role_operations" edges to the RoleOperation entity.
func (ouo *OperationUpdateOne) AddRoleOperations(r ...*RoleOperation) *OperationUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ouo.AddRoleOperationIDs(ids...)
}

// Mutation returns the OperationMutation object of the builder.
func (ouo *OperationUpdateOne) Mutation() *OperationMutation {
	return ouo.mutation
}

// ClearModel clears the "model" edge to the Model entity.
func (ouo *OperationUpdateOne) ClearModel() *OperationUpdateOne {
	ouo.mutation.ClearModel()
	return ouo
}

// ClearRoleOperations clears all "role_operations" edges to the RoleOperation entity.
func (ouo *OperationUpdateOne) ClearRoleOperations() *OperationUpdateOne {
	ouo.mutation.ClearRoleOperations()
	return ouo
}

// RemoveRoleOperationIDs removes the "role_operations" edge to RoleOperation entities by IDs.
func (ouo *OperationUpdateOne) RemoveRoleOperationIDs(ids ...int) *OperationUpdateOne {
	ouo.mutation.RemoveRoleOperationIDs(ids...)
	return ouo
}

// RemoveRoleOperations removes "role_operations" edges to RoleOperation entities.
func (ouo *OperationUpdateOne) RemoveRoleOperations(r ...*RoleOperation) *OperationUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ouo.RemoveRoleOperationIDs(ids...)
}

// Where appends a list predicates to the OperationUpdate builder.
func (ouo *OperationUpdateOne) Where(ps ...predicate.Operation) *OperationUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OperationUpdateOne) Select(field string, fields ...string) *OperationUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Operation entity.
func (ouo *OperationUpdateOne) Save(ctx context.Context) (*Operation, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OperationUpdateOne) SaveX(ctx context.Context) *Operation {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OperationUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OperationUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OperationUpdateOne) check() error {
	if v, ok := ouo.mutation.Name(); ok {
		if err := operation.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Operation.name": %w`, err)}
		}
	}
	if ouo.mutation.ModelCleared() && len(ouo.mutation.ModelIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Operation.model"`)
	}
	return nil
}

func (ouo *OperationUpdateOne) sqlSave(ctx context.Context) (_node *Operation, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(operation.Table, operation.Columns, sqlgraph.NewFieldSpec(operation.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Operation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, operation.FieldID)
		for _, f := range fields {
			if !operation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != operation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Name(); ok {
		_spec.SetField(operation.FieldName, field.TypeString, value)
	}
	if ouo.mutation.ModelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operation.ModelTable,
			Columns: []string{operation.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(model.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operation.ModelTable,
			Columns: []string{operation.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(model.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.RoleOperationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operation.RoleOperationsTable,
			Columns: []string{operation.RoleOperationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roleoperation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedRoleOperationsIDs(); len(nodes) > 0 && !ouo.mutation.RoleOperationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operation.RoleOperationsTable,
			Columns: []string{operation.RoleOperationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roleoperation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RoleOperationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operation.RoleOperationsTable,
			Columns: []string{operation.RoleOperationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roleoperation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Operation{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
