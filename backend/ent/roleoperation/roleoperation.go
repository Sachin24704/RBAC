// Code generated by ent, DO NOT EDIT.

package roleoperation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the roleoperation type in the database.
	Label = "role_operation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRoleID holds the string denoting the role_id field in the database.
	FieldRoleID = "role_id"
	// FieldOperationID holds the string denoting the operation_id field in the database.
	FieldOperationID = "operation_id"
	// EdgeRole holds the string denoting the role edge name in mutations.
	EdgeRole = "role"
	// EdgeOperations holds the string denoting the operations edge name in mutations.
	EdgeOperations = "operations"
	// Table holds the table name of the roleoperation in the database.
	Table = "role_operations"
	// RoleTable is the table that holds the role relation/edge.
	RoleTable = "role_operations"
	// RoleInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RoleInverseTable = "roles"
	// RoleColumn is the table column denoting the role relation/edge.
	RoleColumn = "role_id"
	// OperationsTable is the table that holds the operations relation/edge.
	OperationsTable = "role_operations"
	// OperationsInverseTable is the table name for the Operation entity.
	// It exists in this package in order to avoid circular dependency with the "operation" package.
	OperationsInverseTable = "operations"
	// OperationsColumn is the table column denoting the operations relation/edge.
	OperationsColumn = "operation_id"
)

// Columns holds all SQL columns for roleoperation fields.
var Columns = []string{
	FieldID,
	FieldRoleID,
	FieldOperationID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the RoleOperation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRoleID orders the results by the role_id field.
func ByRoleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleID, opts...).ToFunc()
}

// ByOperationID orders the results by the operation_id field.
func ByOperationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperationID, opts...).ToFunc()
}

// ByRoleField orders the results by role field.
func ByRoleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoleStep(), sql.OrderByField(field, opts...))
	}
}

// ByOperationsField orders the results by operations field.
func ByOperationsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOperationsStep(), sql.OrderByField(field, opts...))
	}
}
func newRoleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RoleTable, RoleColumn),
	)
}
func newOperationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OperationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OperationsTable, OperationsColumn),
	)
}
