// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/operation"
	"backend/ent/role"
	"backend/ent/roleoperation"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoleOperationCreate is the builder for creating a RoleOperation entity.
type RoleOperationCreate struct {
	config
	mutation *RoleOperationMutation
	hooks    []Hook
}

// SetRoleID sets the "role_id" field.
func (roc *RoleOperationCreate) SetRoleID(i int) *RoleOperationCreate {
	roc.mutation.SetRoleID(i)
	return roc
}

// SetOperationID sets the "operation_id" field.
func (roc *RoleOperationCreate) SetOperationID(i int) *RoleOperationCreate {
	roc.mutation.SetOperationID(i)
	return roc
}

// SetRole sets the "role" edge to the Role entity.
func (roc *RoleOperationCreate) SetRole(r *Role) *RoleOperationCreate {
	return roc.SetRoleID(r.ID)
}

// SetOperationsID sets the "operations" edge to the Operation entity by ID.
func (roc *RoleOperationCreate) SetOperationsID(id int) *RoleOperationCreate {
	roc.mutation.SetOperationsID(id)
	return roc
}

// SetOperations sets the "operations" edge to the Operation entity.
func (roc *RoleOperationCreate) SetOperations(o *Operation) *RoleOperationCreate {
	return roc.SetOperationsID(o.ID)
}

// Mutation returns the RoleOperationMutation object of the builder.
func (roc *RoleOperationCreate) Mutation() *RoleOperationMutation {
	return roc.mutation
}

// Save creates the RoleOperation in the database.
func (roc *RoleOperationCreate) Save(ctx context.Context) (*RoleOperation, error) {
	return withHooks(ctx, roc.sqlSave, roc.mutation, roc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (roc *RoleOperationCreate) SaveX(ctx context.Context) *RoleOperation {
	v, err := roc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (roc *RoleOperationCreate) Exec(ctx context.Context) error {
	_, err := roc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (roc *RoleOperationCreate) ExecX(ctx context.Context) {
	if err := roc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (roc *RoleOperationCreate) check() error {
	if _, ok := roc.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role_id", err: errors.New(`ent: missing required field "RoleOperation.role_id"`)}
	}
	if _, ok := roc.mutation.OperationID(); !ok {
		return &ValidationError{Name: "operation_id", err: errors.New(`ent: missing required field "RoleOperation.operation_id"`)}
	}
	if len(roc.mutation.RoleIDs()) == 0 {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required edge "RoleOperation.role"`)}
	}
	if len(roc.mutation.OperationsIDs()) == 0 {
		return &ValidationError{Name: "operations", err: errors.New(`ent: missing required edge "RoleOperation.operations"`)}
	}
	return nil
}

func (roc *RoleOperationCreate) sqlSave(ctx context.Context) (*RoleOperation, error) {
	if err := roc.check(); err != nil {
		return nil, err
	}
	_node, _spec := roc.createSpec()
	if err := sqlgraph.CreateNode(ctx, roc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	roc.mutation.id = &_node.ID
	roc.mutation.done = true
	return _node, nil
}

func (roc *RoleOperationCreate) createSpec() (*RoleOperation, *sqlgraph.CreateSpec) {
	var (
		_node = &RoleOperation{config: roc.config}
		_spec = sqlgraph.NewCreateSpec(roleoperation.Table, sqlgraph.NewFieldSpec(roleoperation.FieldID, field.TypeInt))
	)
	if nodes := roc.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roleoperation.RoleTable,
			Columns: []string{roleoperation.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := roc.mutation.OperationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roleoperation.OperationsTable,
			Columns: []string{roleoperation.OperationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OperationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RoleOperationCreateBulk is the builder for creating many RoleOperation entities in bulk.
type RoleOperationCreateBulk struct {
	config
	err      error
	builders []*RoleOperationCreate
}

// Save creates the RoleOperation entities in the database.
func (rocb *RoleOperationCreateBulk) Save(ctx context.Context) ([]*RoleOperation, error) {
	if rocb.err != nil {
		return nil, rocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rocb.builders))
	nodes := make([]*RoleOperation, len(rocb.builders))
	mutators := make([]Mutator, len(rocb.builders))
	for i := range rocb.builders {
		func(i int, root context.Context) {
			builder := rocb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoleOperationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rocb *RoleOperationCreateBulk) SaveX(ctx context.Context) []*RoleOperation {
	v, err := rocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rocb *RoleOperationCreateBulk) Exec(ctx context.Context) error {
	_, err := rocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rocb *RoleOperationCreateBulk) ExecX(ctx context.Context) {
	if err := rocb.Exec(ctx); err != nil {
		panic(err)
	}
}
